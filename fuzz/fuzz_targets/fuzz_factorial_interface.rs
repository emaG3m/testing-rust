//! Fuzz testing is great! Similar to property-based testing, the goal of fuzzing is to 
//! find edge cases that you, the developer, may not have thought of. Fuzzing is really 
//! only meant to catch things like panics and memory-safety issues. So we're not checking
//! for the correctness of the result here. This is a fabulous technique for anything that's 
//! accepting potentially untrusted input. Things like parsers and protocol implementations
//! are great to test this way.
//!
//! Here we're using cargo-fuzz to help us with the setup and execution, but the actual fuzzing
//! is being handled by [libFuzzer](https://llvm.org/docs/LibFuzzer.html). AFL is also supported.


#![no_main]
#[macro_use] extern crate libfuzzer_sys;
extern crate testing_rust;

use testing_rust::factorial_of_str;

// this function will be called repeatedly with the input that's been generated by the fuzzer
fuzz_target!(|data: &[u8]| {
    let _ = factorial_of_str(data);
});
